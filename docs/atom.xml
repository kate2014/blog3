
  <?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://blog.tommyku.com/">
  <id>https://blog.tommyku.com/</id>
  <title>Tommy Ku's Method Stub</title>
  <updated>2018-06-26T16:00:00Z</updated>
  <link rel="alternate" href="https://blog.tommyku.com/"/>
  <link rel="self" href="https://blog.tommyku.com/atom.xml"/>
  <author>
    <name>Tommy Ku</name>
    <uri>https://blog.tommyku.com</uri>
  </author>
  <entry>
    <id>tag:blog.tommyku.com,2018-06-26:/blog/my-laptop-refused-to-charge-my-phone/</id>
    <title type="html">My laptop refused to charge my phone</title>
    <published>2018-06-26T16:00:00Z</published>
    <updated>2018-06-26T16:00:00Z</updated>
    <link rel="alternate" href="https://blog.tommyku.com/blog/my-laptop-refused-to-charge-my-phone/"/>
    <content type="html">
&lt;p&gt;To extends my 6 year-old Thinkpad X230’s battery life per charge, I have
taken measures from installing power saving software tlp to &lt;a href="../i-switched-from-gnome-to-i3wm/"&gt;switching to
a lightweight window manager&lt;/a&gt;.
It has since served me well with over 2 hours of battery life under normal
load of web development.&lt;/p&gt;

&lt;p&gt;Last night I was trying to charge my phone over the laptop’s USB port.
For a moment the phone showed that it’s charging, then the charging
symbol of the phone quickly switched to non-charging symbol. I tried
rebooting both the phone and laptop to no avail. The phone simply
refused to be charged.&lt;/p&gt;

&lt;p&gt;Or was it?&lt;/p&gt;

&lt;p&gt;As I later realized, my laptop is willing to autosuspend power to USB ports
in order to save power. So I typed &lt;code&gt;sudo powertop&lt;/code&gt; and found the one
toggleable that caused the issue.&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./powertop.png" width="100%"&gt;
&lt;figcaption&gt;By toggling this to “Bad”, my phone could be charged from my laptop again&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Well that’s weird. Nowadays we assume things to “just work”, but there
are things behind the scene that we might not realize if all we did
was just installing software without understanding their working
principles (in this case, autosuspending USB port).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog.tommyku.com,2018-06-22:/blog/a-case-of-web-component-revising-wc-blink/</id>
    <title type="html">A case of Web Component: Revising &amp;lt;wc-blink&amp;gt;</title>
    <published>2018-06-22T16:00:00Z</published>
    <updated>2018-06-22T16:00:00Z</updated>
    <link rel="alternate" href="https://blog.tommyku.com/blog/a-case-of-web-component-revising-wc-blink/"/>
    <content type="html">
&lt;p&gt;On 2015, I wrote &lt;code&gt;&amp;lt;wc-blink&amp;gt;&lt;/code&gt; (check it out on &lt;a href="https://github.com/tommyku/wc-blink"&gt;GitHub&lt;/a&gt;), a custom element that mimics the notorious
and obsolete native element &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; (except that it has a &lt;code&gt;display: block&lt;/code&gt;
instead of &lt;code&gt;display: inline&lt;/code&gt; now that I think about it).&lt;/p&gt;

&lt;link rel="import" href="https://tommyku.github.io/wc-blink/wc-blink-element.html" async=""&gt;

&lt;wc-blink&gt;If your browser supports custom component and HTML import,
you’ll see this blinking! (and appreciate the fact that it’s now
obsolete)&lt;/wc-blink&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;link rel="import" href="https://tommyku.github.io/wc-blink/wc-blink-element.html" async /&amp;gt;

&amp;lt;wc-blink&amp;gt;If your browser supports custom component and HTML import, you'll see this blinking! (and appreciate the fact that it's now obsolete)&amp;lt;/wc-blink&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It was absoluely unnecessary to make it a web component because there
exists a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink"&gt;CSS-only polyfill&lt;/a&gt;
that receives wide browser support (it’s just CSS) and requires no
JavaScript or custom element support.&lt;/p&gt;

&lt;p&gt;This element was written to explore the then-v0 customer element
standard. Even today, it still sound like the future to come, where you can plug
and play any HTML element without having to convert them from front-end
frameworks such as React, Vue.js or AngularJS.&lt;/p&gt;

&lt;p&gt;When I was reading Mikeal’s &lt;a href="https://medium.com/@mikeal/ive-seen-the-future-it-s-full-of-html-2577246f2210"&gt;post on web component&lt;/a&gt;, I was still full of
hope even though I jumped into developing in React a few months before
and never turned back. Web component is still at it’s infancy in terms
of adoption and browser supports while component-based front-end
frameworks are quickly fulfilling its promise - except the
interoperatbility part.&lt;/p&gt;

&lt;script type="text/javascript" src="https://ssl.gstatic.com/trends_nrtr/1457_RC04/embed_loader.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
  trends.embed.renderExploreWidget("TIMESERIES", {"comparisonItem":[{"keyword":"React","geo":"","time":"2015-01-01 2017-06-23"},{"keyword":"Vue","geo":"","time":"2015-01-01 2017-06-23"},{"keyword":"Web component","geo":"","time":"2015-01-01 2017-06-23"},{"keyword":"Custom element","geo":"","time":"2015-01-01 2017-06-23"}],"category":31,"property":""}, {"exploreQuery":"cat=31&amp;date=2015-01-01%202017-06-23&amp;q=React,Vue,Web%20component,Custom%20element","guestPath":"https://trends.google.com:443/trends/embed/"});
&lt;/script&gt;

&lt;p style="text-align: center;font-size: 0.8125em;"&gt;
  &lt;i&gt;&lt;/i&gt;
&lt;/p&gt;

&lt;h2 id="in-case-of-wc-blink-in-2015"&gt;In case of &amp;lt;wc-blink&amp;gt; in 2015&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;wc-blink&amp;gt;&lt;/code&gt; was originally written in custom element v0, without the
ES2015 vibe of JavaScript class. Yet the general idea was the same: first you
attach a shadowDOM to the element housing your content, then fill it up
with lifecycle callbacks such as attachedCallback() or
attributeChangedCallback() which reassembles React’s componentDidMount() and a high level shouldComponentUpdate() + render() + componentDidUpdate().&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!-- Commit: df3fcb41c880cb6762c609d7657cc0fd833d9134 --&amp;gt;
&amp;lt;!-- wc-blink.html --&amp;gt;
&amp;lt;template&amp;gt;
  &amp;lt;style&amp;gt;
    /* Credit goes to google for this part
       Search "html blink" on google and see */
    @-webkit-keyframes blink {80%{opacity:0.0}}
    @keyframes blink {80%{opacity:0.0}}
    :host, * {
      -webkit-animation:blink 1s steps(1,end) 0s infinite;
      animation:blink 1s steps(1,end) 0s infinite;
    }
  &amp;lt;/style&amp;gt;
  &amp;lt;content&amp;gt;&amp;lt;/content&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  (function() {
    // Refers to the "importer", which is index.html
    var thatDoc = document;

    // Refers to the "importee", which is src/hello-world.html
    var thisDoc =  (thatDoc._currentScript || thatDoc.currentScript).ownerDocument;

    // Gets content from &amp;lt;template&amp;gt;
    var template = thisDoc.querySelector('template').content;

    // Creates an object based in the HTML Element prototype
    var element = Object.create(HTMLElement.prototype);

    // Fires when an instance of the element is created
    element.createdCallback = function() {
      var shadowRoot = this.createShadowRoot();
      shadowRoot.appendChild(document.importNode(template, true));
    };

    // Fires when an instance was inserted into the document
    element.attachedCallback = function() {};

    // Fires when an instance was removed from the document
    element.detachedCallback = function() {};

    // Fires when an attribute was added, removed, or updated
    element.attributeChangedCallback = function(attr, oldVal, newVal) {};

    // Registers &amp;lt;hello-world&amp;gt; in the main document
    window.WcBlink = thatDoc.registerElement('wc-blink', {
        prototype: element
    });
  }());
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, this is not pretty. Despite &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; reassembles the
convenient JSX where we define the HTML structure of the “shadowDOM”
(it isn’t exactly shadowDOM in React’s case despite some degree of
encapusulation).&lt;/p&gt;

&lt;p&gt;Nevertheless, custom component v0 &lt;code&gt;&amp;lt;wc-blink&amp;gt;&lt;/code&gt; has a much lighter
footprint compared to even the simpliest React app. All you need is a
&lt;code&gt;wc-blink.html&lt;/code&gt;, and a line of &lt;code&gt;&amp;lt;link rel='import' href='wc-blink.html'&amp;gt;&lt;/code&gt;.
No &lt;code&gt;npm install&lt;/code&gt; (I used &lt;code&gt;git submodule add&lt;/code&gt;). Bundling isn’t necessary
until you have multiple HTML elements to import depending on how much extra
lines of &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; you can tolerate in your HTML file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;wc-blink&amp;gt;&lt;/code&gt; was built as an exercise to see how the custom element
standard works. Judging from the amount of code I need to write by
myself to create an element as simple as &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt;, it wasn’t really
attractive back then. I did love the part that I could import an element
and expect it’ll work like a charm, it was just that betting on a web
standard that was in drafting stage was rather reckless.&lt;/p&gt;

&lt;p&gt;With such a simple component, I haven’t even got to partial shadowDOM
update (where I really hoped there was something like React’s VirtualDOM)
or inter-component communication. As the web component standard is less
opinionated than frameworks like React, &lt;em&gt;it gives you lots of ropes to hang
yourself&lt;/em&gt;, ending up writing overly coupled components, unnecessary
DOM updates and weirdly behaving components due to lifecycle issue (like
things not initializing/firing properly).&lt;/p&gt;

&lt;h2 id="in-case-of-wc-blink-in-2018"&gt;In case of &amp;lt;wc-blink&amp;gt; in 2018&lt;/h2&gt;

&lt;p&gt;My worry came true. Custom element v0 was removed and v1 was introduced
relying on ES2015. &lt;code&gt;document.registerElement&lt;/code&gt; was no longer in the web
standard and we should expect one day no browser would support it
(Firefox never supported v0 in the first place 😐, nor v1 at the time of
writing)&lt;/p&gt;

&lt;p&gt;In general, my v0 and v1 implementations of &lt;code&gt;&amp;lt;wc-blink&amp;gt;&lt;/code&gt; are quite similar. This revision
only makes use of ES2015 class, and replaced &lt;code&gt;&amp;lt;content&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; to
give users a better idea where the dynamic content go.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!-- Commit: 3f8fa76675c15177baf9ccb81dcbb9b6831effcd --&amp;gt;
&amp;lt;!-- wc-blink-element.html --&amp;gt;
&amp;lt;template id='wc-blink'&amp;gt;
  &amp;lt;style&amp;gt;
    /* Credit goes to google for this part
       Search "html blink" on google and see */
    @keyframes blink {80%{opacity:0.0}}
    :host, * {
      animation:blink 1s steps(1,end) 0s infinite;
    }
  &amp;lt;/style&amp;gt;
  &amp;lt;slot name='content'&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script type='text/javascript'&amp;gt;
  // hack to get reference to this document even if calling constructors somewhere else
  const thisDoc = document.currentScript.ownerDocument;

  class WcBlink extends HTMLElement {
    constructor() {
      super();

      const template = thisDoc.getElementById('wc-blink')
        .content;

      const shadowRoot = this.attachShadow({ mode: 'open' })
        .appendChild(template.cloneNode(true));

      this.blinkStep = 0;
      this.blinkInterval = setInterval(function() {
        this.updateDisplay();
      }.bind(this), 200);
    }

    connectedCallback() {
      const content = document.createElement('div');
      content.setAttribute('slot', 'content');

      content.setAttribute('slot', 'content');
      this.childNodes.forEach((child) =&amp;gt; content.appendChild(child));
      this.appendChild(content);
    }

    updateDisplay() {
      const content = this.querySelector('div[slot=content]');
      content.style.opacity = (this.blinkStep == 3) ? 0 : content.style.opacity;
      content.style.opacity = (this.blinkStep == 4) ? 1 : content.style.opacity;

      this.blinkStep++;
      this.blinkStep = this.blinkStep % 5;
    }
  }

  customElements.define('wc-blink', WcBlink);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even in 2018, tutorials on the topic are hard to find. Web component
is much less opinionated than frameworks and therefore each tutorial author has their
own way of doing things. For example, to get content &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; from
template some decided to use &lt;code&gt;await fetch('template.html')&lt;/code&gt; while some
referenced the &lt;code&gt;link[rel="import"]&lt;/code&gt; to get the template document when
importing the component into other documents. At the end, I figured out
a way to get a hold of the reference to &lt;code&gt;ownerDocument&lt;/code&gt; even after
importing the component from other documents.&lt;/p&gt;

&lt;p&gt;You may have also noticed &lt;code&gt;blickStep&lt;/code&gt; and &lt;code&gt;updateDisplay&lt;/code&gt;, which are
unnnecessary given that there’s a blinking animation applied to the
shadowDOM. Although the selector can select the element within the
shadowDOM (verified using &lt;code&gt;color: red !important;&lt;/code&gt;), animation simply
doesn’t fire, perhaps owing to browser bug as it works on my mobile
browser but not on desktop.&lt;/p&gt;

&lt;p&gt;Although adoption of web component is still low to date and there seems to
be a larger community for Polymer, I still think that going through
all the hassles to write a web component-powered app less attractive
than writing a React app in a production setting.&lt;/p&gt;

&lt;p&gt;With that being said, I may still have some fun writing web components
when I am offline.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog.tommyku.com,2018-05-18:/blog/i-switched-from-gnome-to-i3wm/</id>
    <title type="html">I switched from GNOME to i3wm</title>
    <published>2018-05-18T16:00:00Z</published>
    <updated>2018-05-18T16:00:00Z</updated>
    <link rel="alternate" href="https://blog.tommyku.com/blog/i-switched-from-gnome-to-i3wm/"/>
    <content type="html">
&lt;p&gt;My ThinkPad X230 (yes it’s still kicking since &lt;a href="../do-i-need-a-new-laptop/"&gt;the upgrade&lt;/a&gt;)
has a 12.5-inch screen supporting resolution up to 1366x768. It’s
far behind the common resolution of 1920x1080 that has became widely
available today. Vendors even went up to QHD+ with 3200x1800 like my
Razer Blade 2015 to please the eyes of the customers. Due to battery
life issue and that there is no viable battery replacement solution
except paying expensively to ship it back to Razer and replace it.
Therefore, I had to stick to my ThinkPad X230 which only holds 60%
of its battery’s original design capacity now.&lt;/p&gt;

&lt;p&gt;Recently I upgraded to Ubuntu 18.04 LTS hoping Linux 4.15 could give me
some better battery life and prettier layouts. Naive was I. Desktop
and laptop support on Linux has been good thanks to people in the open
source scene, but it is simply falling behind in battery life
optimization compared to Windows 7 on the same machine. Layout-wise,
GNOME of Ubuntu 18.04 looks good except that the top bar and application
bar don’t merge like they did in Unity. This further reduce the
available workspace I have for the applications. This is detrimental to
me such a small screen, and I had to switch to something else.&lt;/p&gt;

&lt;h2 id="what-is-i3wm"&gt;What is i3wm?&lt;/h2&gt;

&lt;p&gt;i3 is a tiling window manager alternative to GNOME and Unity. Tiling
means that windows are non-overlapping frames instead of the traditional
stacking windows that we are familiar with. The first window you open
occupies the whole screen, then the next occupies half it the screen,
the third window occupies one-forth of the screen, and so on.&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./i3wm_tiling.png" width="100%" style="max-width: 48em;"&gt;
&lt;figcaption&gt;i3wm with non-overlapping tiling windows&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;On Reddit &lt;a href="https://www.reddit.com/r/unixporn/"&gt;/r/unixporn&lt;/a&gt;, there is a strong following for tiling
windows manager as new “rices” are posted onto the subreddit daily, with
a lot of them using a fork of i3wm, i3-gaps, which add gaps between the
tiles and some other features.&lt;/p&gt;

&lt;p&gt;For the poor folks deprived of pixels like me, we’d have more
pixels for our applications if we stick to the original i3wm.&lt;/p&gt;

&lt;p&gt;i3 also manages it’s windows in workspaces, as you can see in the
screenshot above, I am using the workspace named “Terminal”. I also have
workspace named “Chrome”, “Firefox”, “Files” and so on. I type &lt;code&gt;Super +
3&lt;/code&gt; to switch to the Chrome workspace, or &lt;code&gt;Super + 4&lt;/code&gt; to switch to Firefox.
It didn’t take much effort for me to get used to this, and each application
gets max screen pixels.&lt;/p&gt;

&lt;p&gt;I appreciate i3 for it’s simplicity and flexibility in configuration.
The window manager is primarily keyboard shortcut-driven, and there’s no
weird transparency/blurring, just simple pixels for all your basic needs.
It is not pretty at first unless you customize it to your liking. I kept
a barebone setup for it and it rewards me with improved battery life and
more pixels on screen compared to GNOME and Unity.&lt;/p&gt;

&lt;h2 id="i-have-installed-i3wm-now-what"&gt;I have installed i3wm, now what?&lt;/h2&gt;

&lt;p&gt;The big question I asked after installing i3wm was like, what do I do?
Unlike GNOME or Unity where application launcher is triggered by
tapping the Super key (the one with Windows logo), in i3 you type &lt;code&gt;Super
+ D&lt;/code&gt; to fire up &lt;code&gt;dmenu&lt;/code&gt;, or &lt;code&gt;rofi&lt;/code&gt;, or whatever launcher of your choice.
Sorry that I couldn’t capture a screenshot while having rofi menu on,
but you may find some screenshots of rofi &lt;a href="https://github.com/DaveDavenport/rofi-themes/tree/master/Official%20Themes"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More often than not in the first couple weeks you’ll find i3 doesn’t
have many things working out-of-the-box for you. Your configuration file
located at &lt;code&gt;~/.config/i3/config&lt;/code&gt; is likely to expand to twice or even
three times its original size as you add in configurations. For example,
I had to map media keys (+vol, -vol, mute, etc) and PrintScreen to their
respective commands for them to work. There was no lock screen or desktop
background, so you will have to use &lt;code&gt;i3lock&lt;/code&gt; to add a lock screen, and &lt;code&gt;nitrogen&lt;/code&gt;
to set a desktop background.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The usual elitism amongst minimal window managers: Don’t be bloated, don’t be fancy (simple borders are the most decoration we want to have)&lt;/p&gt;

  &lt;p&gt;— Goals for i3 (&lt;a href="https://i3wm.org/"&gt;www.i3wm.org&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;i3 is minimal by design. Not all computer have a PrintScreen key, or
media keys. If you have them, you will have to work out ways for them to
work on your machine. The official documentation for i3wm is very
well-written, well-organized and easy to understand that I finished
reading it over a bus ride. Surprisingly, there’s a big and active community
on &lt;a href="https://www.reddit.com/r/i3wm/"&gt;/r/i3wm&lt;/a&gt;, various online forums and
tutorials with people willing to address your issue or who encountered
issues similar to yours before.&lt;/p&gt;

&lt;p&gt;I have also developed an interest in reading others’ i3wm config they
made public on GitHub or Gists. These config files contain some
convenient binding I haven’t thought of, or better ways to do something.
Currently my i3 config is also hosted on GitHub via &lt;a href="https://github.com/tommyku/my-i3-config"&gt;tommyku/my-i3-config&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./i3wm_polybar.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;figcaption&gt;June 2018: How my current setup with polybar looks like&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src="./i3wm_current.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;figcaption&gt;&lt;s&gt;How my current setup looks like&lt;/s&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The window manager has been working very well for me, I still have some minor
things I couldn’t quite figure out myself, like key bindings for multiple
monitors, but there are ample of resources and examples out there that I
could look at. I expect to continue tinker with my i3 config, and that’s
probably the fun of having a highly customizable environment on my
laptop.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog.tommyku.com,2018-05-17:/blog/relocating-from-openshift-v2/</id>
    <title type="html">Relocating from OpenShift v2</title>
    <published>2018-05-17T16:00:00Z</published>
    <updated>2018-05-17T16:00:00Z</updated>
    <link rel="alternate" href="https://blog.tommyku.com/blog/relocating-from-openshift-v2/"/>
    <content type="html">
&lt;p&gt;This post summaries my efforts over September and October to migrate my
websites and apps away from OpenShift v2 to other hosting platforms as
Red Hat finally closed it down.&lt;/p&gt;

&lt;h2 id="what-is-openshift"&gt;What is OpenShift?&lt;/h2&gt;

&lt;p&gt;OpenShift is an PaaS service by Red Hat originated from 2011, it
provides infrastructure for users to deploy their apps with little to no
concern about the underlying infrastructure where the app runs on.
Deployment can be as simple as a &lt;code&gt;git push&lt;/code&gt; command, given that the
git &lt;code&gt;post-receive&lt;/code&gt; hooks have been properly configured.&lt;/p&gt;

&lt;p&gt;I have been using OpenShift v2 since 2012 to deploy production
application for my freelance and personal projects. The free bronze tier of
OpenShift v2 allows for 3 ‘gears’, which are instances of a virtual
machine on OpenShift platform. The resource constraint never bothered
me. If you run out of 3 gears, you can register for another OpenShift
account, then link the new account to the existing one such that
you can use the same SSH public key to deploy to the 3 additional gears
in the new account.&lt;/p&gt;

&lt;p&gt;That means you can run virtually unlimited number of apps for free,
without credit card.&lt;/p&gt;

&lt;p&gt;To Red Hat, this exploit might have costed them so much that they had
to close down OpenShift v2 in favor of the newer OpenShift v3. On
OpenShift v3 the cheapest tier ‘Starter’ allows for only 1 project, the
next tier ‘Pro’ allows for 10 projects at $50/month. Well, OpenShift v2
could have died of old age though.&lt;/p&gt;

&lt;p&gt;That sucks. I had to move 14 websites/apps, including a client project from
OpenShift to other platforms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 client project&lt;/li&gt;
  &lt;li&gt;1 web API (require relocation)&lt;/li&gt;
  &lt;li&gt;4 website/web apps (require relocation)&lt;/li&gt;
  &lt;li&gt;8 website/web apps (trashed)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="options-aside-from-openshift-v2"&gt;Options aside from OpenShift v2&lt;/h2&gt;

&lt;p&gt;I love free things. Free things that remain free in long term are even
better. On September I had these options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Digital Ocean (with GitHub’s $50 student credit)&lt;/li&gt;
  &lt;li&gt;Free tier from AWS, Azure and GCP (free for 12 months)&lt;/li&gt;
  &lt;li&gt;GitHub Page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Digital Ocean offers virtual private server that I can install anything
on. AWS, Azure and GCP provide a wide variety of products and solutions
to suit various requirements and at different price ranges.&lt;/p&gt;

&lt;p&gt;If you don’t mind open-sourcing your static site or that your site uses
external APIs for dynamic features, GitHub Page would be your best
choice because it’s completely free and ships with HTTPS by default.&lt;/p&gt;

&lt;h2 id="post-openshift-v2-life-of-hosting"&gt;Post-OpenShift v2 life of hosting&lt;/h2&gt;

&lt;p&gt;Long story short, I moved all static assets from OpenShift to GitHub
Page. These include blog, static websites and web apps using self-hosted
database like Hoodie. For sites that are dynamic, I would re-think
whether it needs to be dynamic, or whether I really need the site
itself. I will go into more details about those sites. And for those
which I really must host on a VPS, I hosted them together on one single
instance on Linode or Digital Ocean, whichever I have free credits on.&lt;/p&gt;

&lt;h3 id="static-sites"&gt;Static sites&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; are great because it is free,
it hosts reasonably big static sites, it serves sites over HTTPS, it
allows for CNAME binding so I could use the domain names of my choosing
and I have never had any issue with it except the deployment time after
&lt;code&gt;git push&lt;/code&gt; is rather random.&lt;/p&gt;

&lt;p&gt;My sites and web apps locally using static site generator such as Nanoc
or bundler such as webpack, then I would commit the build to &lt;code&gt;gh-pages&lt;/code&gt;
branch of my repo, then off it goes with &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I have deployed some of my &lt;a href="https://github.com/tommyku/expense-tracker-lite"&gt;progressive&lt;/a&gt;
&lt;a href="https://github.com/tommyku/tip3"&gt;web apps&lt;/a&gt; and deployed them using the
&lt;code&gt;gh-pages&lt;/code&gt; package from the npm repository. It copies your build folder
and commit it to the &lt;code&gt;gh-pages&lt;/code&gt; branch, and deploy (push) it to GitHub.
As my PWAs are using a self-hosted Hoodie backend of mine to store the
data, I did not have to worry about leaking my keys or tokens to the
public because my apps simply don’t rely on them.&lt;/p&gt;

&lt;h3 id="unnecessarily-dynamic-sites"&gt;Unnecessarily dynamic sites&lt;/h3&gt;

&lt;p&gt;After writing the &lt;a href="../doing-things-the-layman-way/"&gt;post about doing things the layman way&lt;/a&gt;,
I have embraced the lazy approach to things — I don’t have to do
everything by myself, and if I am to do them myself, I would take the
shortest path and the easiest approach.&lt;/p&gt;

&lt;p&gt;Which means I discontinued my project of building my own bookmarking
service &lt;a href="https://github.com/tommyku/link2-server"&gt;link2&lt;/a&gt; and embrace
the simplicity of Google Form and Spreadsheet instead. Simple, easy, and
free. I didn’t have to pay for my own bookmarking now, and Google
probably won’t care enought to look at my Spreadsheet to try to
“understand” me.&lt;/p&gt;

&lt;p&gt;I used to host a website that tells you which room on campus is probably
empty, so instead of going to the library where everyone is coughing or
sneezing or both, people can use empty classroom to study free from
distractions. The website was written in Laravel, which requires PHP and
a MySQL database. Deeper look into the service made me realize that it
doesn’t have to be dynamic. It could just be a bunch of JSON files, and
a progressive web app that loads up those files for once, then read from
cache forever. Yes, the service is no longer dynamic and it’s now hosted
freely on GitHub Pages instead.&lt;/p&gt;

&lt;h3 id="dynamic-sites-databases-and-bots"&gt;Dynamic sites, databases and bots&lt;/h3&gt;

&lt;p&gt;Although offloading static content to GitHub Pages saved me a bunch of
money from VPS, some still require a server to run on. For example, a
Hoodie backend requires a Node.js environment and CouchDB. Plus I am
running a bunch of small Telegram utility bots and web services
such as a link shortener, a wrapper for youtube-dl and HTTP file server as
its companion, and some secret sites of mine.&lt;/p&gt;

&lt;p&gt;I don’t need 512MB RAM and 1 vCPU per service. In face, an VPS instance
of 1GB RAM and 1 vCPU is more than enough to run all of them. I used
docker to better maintain multiple servers and services in containers,
and fired up a &lt;a href="https://github.com/jwilder/nginx-proxy"&gt;Nginx reverse proxy&lt;/a&gt;
to tunnel traffic for each service into their respective container. It’s
automatic and I could disable/enable any of them with a few lines of
commands.&lt;/p&gt;

&lt;p&gt;I paid $5/month to Linode for an VPS instance which I run multiple
services on. It is fairly cheap, but if I wish I could even set the same
thing up at home, using a Raspberry Pi 1 Model B which I had no purpose
for since I have bought it a few years back. I could set up
port-forwarding from my router, and use &lt;code&gt;ddclient&lt;/code&gt; to update my Cloudflare
DNS record automatically. However, the marginal benefit of doing this
would be minimal compared to having an VPS on the cloud where they have
better spec and more bandwidth.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;OpenShift v2 has been the birth place of my career by allowing me to host
my random and mostly crappy creations over the years, but I had to move on.
Like dynasty, hosting services live and die. They might discontinue all
of a sudden for a lack of profit or prospect (obviously). And people
have to move on. Hosting has never been as cheap and accessible as
today, and I wish they continue to live on, free or paid alike so I
could continue to have a place on the Internet.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog.tommyku.com,2018-01-12:/blog/communication-between-cpp-and-php-program-using-socket/</id>
    <title type="html">Communication between C++ and PHP program using socket</title>
    <published>2018-01-12T16:00:00Z</published>
    <updated>2018-01-12T16:00:00Z</updated>
    <link rel="alternate" href="https://blog.tommyku.com/blog/communication-between-cpp-and-php-program-using-socket/"/>
    <content type="html">
&lt;h2 id="background"&gt;Background&lt;/h2&gt;

&lt;p&gt;In a recent job, I had to integrate a piece of hardware with my
PHP server. The only library available was written in C and Java, yet
it’s unreasonable to port the whole PHP application just because it
lacks the library to communicate with the hardware.&lt;/p&gt;

&lt;p&gt;Then I came up with an idea of writting a C++ application to bridge the
hardware and the PHP application. The C++ application can use the
library, no problem, but how could I let my C++ and my PHP applications
communicate?&lt;/p&gt;

&lt;p&gt;I chose to use socket because it’s straightforward to implement and
reliable enough (for TCP) for my little application that exchanges only
short texts per transaction.&lt;/p&gt;

&lt;p&gt;In this short post, I will go over writing a C++ server and a PHP
client that communicate using socket. Demo code can be found on
&lt;a href="https://github.com/tommyku/cpp-php-socket-demo"&gt;tommyku/cpp-php-socket-demo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="c-server"&gt;C++ Server&lt;/h2&gt;

&lt;p&gt;Our C++ server is a simple echo server — it echos back to the
client whatever it receives.&lt;/p&gt;

&lt;p&gt;First, we need to include some libraries.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-cpp"&gt;#include &amp;lt;arpa/inet.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;signal.h&amp;gt;

using namespace std;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I create a signal handler to handle &lt;code&gt;SIGTERM&lt;/code&gt;, &lt;code&gt;SIGKILL&lt;/code&gt; and &lt;code&gt;SIGINT&lt;/code&gt;.
This handler becomes useful when I ran my server as a daemon in the background
because I can clean things up such as removing wthe socket file and flushing the log buffer
here when the application closes. Note I made the socket file descriptor &lt;code&gt;server&lt;/code&gt;
global so that the signal handler can access it outside of the &lt;code&gt;main&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-cpp"&gt;#define SOCKET_FILENAME "/tmp/server.sock"

int server;

void signal_callback_handler(int signum)
{
  // close server
  close(server);
  // remove the socket file
  unlink(SOCKET_FILENAME);
  // signal handled
  exit(0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here goes the rest of the application.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-cpp"&gt;int main(int argc, char **argv)
{
  struct sockaddr_un server_addr, client_addr;
  socklen_t clientlen = sizeof(client_addr);
  int client, buflen, nread;
  char *buf;

  puts("Hell World");

  // listen to SIGINT, SIGTERM, and SIGKILL
  signal(SIGINT, signal_callback_handler);
  signal(SIGTERM, signal_callback_handler);
  signal(SIGKILL, signal_callback_handler);

  // setup socket address structure
  memset(&amp;amp;server_addr, 0, sizeof(server_addr));
  server_addr.sun_family = AF_UNIX;
  strcpy(server_addr.sun_path, SOCKET_FILENAME);

  // create socket
  server = socket(PF_UNIX, SOCK_STREAM, 0);
  if (!server) {
    perror("socket");
    exit(-1);
  }

  // call bind to associate the socket with our local address and
  // port
  if (bind(server, (const struct sockaddr *)&amp;amp;server_addr, sizeof(server_addr)) &amp;lt; 0) {
    perror("bind");
    exit(-1);
  }

  // convert the socket to listen for incoming connections
  if (listen(server, 0) &amp;lt; 0) {
    perror("listen");
    exit(-1);
  }

  puts("Listening to connection...");

  // allocate buffer
  buflen = 1024;
  buf = new char[buflen+1];

  // loop to handle all requests
  while (1) {
    unsigned int client = accept(server, (struct sockaddr *)&amp;amp;client_addr, &amp;amp;clientlen);

    // read a request
    memset(buf, 0, buflen);
    nread = recv(client, buf, buflen, 0);

    printf("\nClient says: %s\n\n", buf);

    // echo back to the client
    send(client, buf, nread, 0);

    close(client);
  }

  close(server);

  unlink(SOCKET_FILENAME);

return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first you create a socket file descriptor with socket domain and type,
which hasn’t been bind to anything yet. Then you bind it to a specific address described in
&lt;code&gt;server_addr&lt;/code&gt;. After that, you put the socket in passive mode which
waits for clients to approach and make connection.&lt;/p&gt;

&lt;p&gt;When creating a socket, I had to made a design decision whether to use
UNIX domain or Internet domain when creating my socket.&lt;/p&gt;

&lt;p&gt;UNIX domain (using PF_UNIX when creating socket) is a component of
POSIX, so it’s internal of the host and does not require (de)encapsulation
of the internet and network layer of TCP/IP. Therefore, it’s more
efficient for IPC and more secure as other devices in the LAN cannot tap
into this socket.&lt;/p&gt;

&lt;p&gt;On the other hand, Internet domain is just like UNIX domain but the
socket is binded to an address and a port instead of a socket file as in
UNIX domain. It works like UNIX domain socket but other devices in the LAN
can connect to this socket (depending on your firewall setting).&lt;/p&gt;

&lt;p&gt;Since the purpose of this socket is purely for interprocess
communication, there is no need to expose the port to outside devices,
so I chose to create my socket in UNIX domain.&lt;/p&gt;

&lt;p&gt;In the infinite while loop, the program accepts connection from a
client, and use &lt;code&gt;recv&lt;/code&gt; to read the content sent by the client. After
doing something with the content received (in this program it does
nothing), &lt;code&gt;sent&lt;/code&gt; is used to send a reply to the client.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-cpp"&gt;  while (1) {
    unsigned int client = accept(server, (struct sockaddr *)&amp;amp;client_addr, &amp;amp;clientlen);
    // rest of the code...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="php-client"&gt;PHP Client&lt;/h2&gt;

&lt;p&gt;The PHP code does pretty much the similar thing. Except that instead of
binding to a socket, it connects to a socket that’s already opened by
the C++ program. It will send a message, wait for the first reply while the
C++ program does it’s thing, and then terminate.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-php"&gt;&amp;lt;?php
error_reporting(E_ALL);

if(!($sock = socket_create(AF_UNIX, SOCK_STREAM, 0)))
{
    $errorcode = socket_last_error();
    $errormsg = socket_strerror($errorcode);

    die("Couldn't create socket: [$errorcode] $errormsg \n");
}

echo "Socket created";

if(!socket_connect($sock , '/tmp/server.sock'))
{
    $errorcode = socket_last_error();
    $errormsg = socket_strerror($errorcode);
    die("Could not connect: [$errorcode] $errormsg \n");
}

echo "Connection established \n";

$message = $argv[1];

if(!socket_send( $sock , $message , strlen($message) , 0))
{
    $errorcode = socket_last_error();
    $errormsg = socket_strerror($errorcode);

    die("Could not send data: [$errorcode] $errormsg \n");
}

echo "Message send successfully \n";

// Now receive reply from server
if(socket_recv( $sock , $buf , 1024, MSG_WAITALL ) === FALSE)
{
    $errorcode = socket_last_error();
    $errormsg = socket_strerror($errorcode);
    die("Could not receive data: [$errorcode] $errormsg \n");
}

echo "Message received \n";

// print the received message
var_dump($buf);

socket_close($sock);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to note if you’re like me who develops the PHP application in
a docker container which has a separate file system from the host is
that you need to mount the directory where your socket file resides in
the host into the docker container. Otherwise, you may scratch your head
like I did when &lt;code&gt;socket_connect&lt;/code&gt; reports: &lt;code&gt;socket_connect(): unable to connect [2]: No such file or directory&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="accepting-one-connection-at-a-time"&gt;Accepting one connection at a time&lt;/h2&gt;

&lt;p&gt;As the hardware I was working with prohibits parallelism, only one
request should be handled by it at a time. It was tempting for me to
leave the socket open and push the requests into a queue, but how’d the
C++ program know if one request is still valid without the PHP program
first look at the respond of the last request?&lt;/p&gt;

&lt;p&gt;As a result, I simply closed the socket once a connection is established
and something is being sent in. The program handles the requets, send a
response back and then binds to the socket again.&lt;/p&gt;

&lt;p&gt;To do so, we define a function &lt;code&gt;bind_listen_socket&lt;/code&gt; that wraps all the
code needed to create, bind and listen to a socket. This function will
be called when the program starts and after a request has been
processed. This piece of code was originally in &lt;code&gt;main&lt;/code&gt; but now it’s
being moved to a function.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-cpp"&gt;#include &amp;lt;arpa/inet.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;sys/un.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;signal.h&amp;gt;

using namespace std;

#define SOCKET_FILENAME "/tmp/server.sock"

int server;

void bind_listen_socket(int &amp;amp;server, sockaddr_un &amp;amp;server_addr)
{
  // create socket
  server = socket(PF_UNIX, SOCK_STREAM, 0);
  if (!server) {
    perror("socket");
    exit(-1);
  }

  // call bind to associate the socket with our local address and
  // port
  if (bind(server, (const struct sockaddr *)&amp;amp;server_addr, sizeof(server_addr)) &amp;lt; 0) {
    perror("bind");
    exit(-1);
  }

  // convert the socket to listen for incoming connections
  if (listen(server, 0) &amp;lt; 0) {
    perror("listen");
    exit(-1);
  }

  puts("Listening to connection...");

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest of the program remains similar to the orginal version, however
it calls &lt;code&gt;bind_listen_socket&lt;/code&gt; whenever it wants to create, bind and
listen to a socket. Moreover, the socket file descriptor is closed and
the socket file removed once there is a request coming in from a client.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-cpp"&gt;void signal_callback_handler(int signum)
{
  // close server
  close(server);
  // remove the socket file
  unlink(SOCKET_FILENAME);
  // signal handled
  exit(0);
}

int main(int argc, char **argv)
{
  struct sockaddr_un server_addr, client_addr;
  socklen_t clientlen = sizeof(client_addr);
  int client, buflen, nread;
  char *buf;

  puts("Hell World");

  // listen to SIGINT, SIGTERM, and SIGKILL
  signal(SIGINT, signal_callback_handler);
  signal(SIGTERM, signal_callback_handler);
  signal(SIGKILL, signal_callback_handler);

  // setup socket address structure
  memset(&amp;amp;server_addr, 0, sizeof(server_addr));
  server_addr.sun_family = AF_UNIX;
  strcpy(server_addr.sun_path, SOCKET_FILENAME);

  // bind and listen on the socket file
  bind_listen_socket(server, server_addr);

  // allocate buffer
  buflen = 1024;
  buf = new char[buflen+1];

  // loop to handle all requests
  while (1) {
    unsigned int client = accept(server, (struct sockaddr *)&amp;amp;client_addr, &amp;amp;clientlen);

    // got a request, close the socket
    close(server);
    unlink(SOCKET_FILENAME);

    // read a request
    memset(buf, 0, buflen);
    nread = recv(client, buf, buflen, 0);

    printf("\nClient says: %s\n\n", buf);

    // echo back to the client
    send(client, buf, nread, 0);

    close(client);

    sleep(2);

    // re-bind and listen on the socket
    bind_listen_socket(server, server_addr);
  }

  close(server);

  unlink(SOCKET_FILENAME);

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During the execution of the &lt;code&gt;while&lt;/code&gt; loop body and that 2 seconds delay I
added to demonstrate that the socket really does not take any new
connection during the execution. This is illustrated below. When trying
to connect to the socket, the client couldn’t open the socket file
during the 2-second period.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;/run/app # php client.php Hi
Socket createdConnection established 
Message send successfully 
Message received 
string(2) "Hi"

/run/app # php client.php Hi
Socket created
Warning: socket_connect(): unable to connect [2]: No such file or directory in /run/app/client.php on line 14
Could not connect: [2] No such file or directory 

/run/app # php client.php Hi
Socket createdConnection established 
Message send successfully 
Message received 
string(2) "Hi"
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="remarks"&gt;Remarks&lt;/h2&gt;

&lt;p&gt;During the handling of my job and creation of this post,
I learned that socket in UNIX domain is a very fast and effective way to achieve
interprocess communication using different programming languages&lt;/p&gt;

&lt;p&gt;The code used as examples here are available at &lt;a href="https://github.com/tommyku/cpp-php-socket-demo"&gt;tommyku/cpp-php-socket-demo&lt;/a&gt;.
As I was searching for socket programming with PHP and C++, a tutorial from &lt;a href="http://www.binarytides.com/php-socket-programming-tutorial/"&gt;BinaryTides&lt;/a&gt;
and &lt;a href="https://github.com/zappala/socket-programming-examples-c"&gt;zappala/socket-programming-examples-c&lt;/a&gt; have been very useful.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog.tommyku.com,2017-11-14:/blog/the-cat-state-of-boolean-variable/</id>
    <title type="html">The "cat state" of boolean variable</title>
    <published>2017-11-14T16:00:00Z</published>
    <updated>2017-11-14T16:00:00Z</updated>
    <link rel="alternate" href="https://blog.tommyku.com/blog/the-cat-state-of-boolean-variable/"/>
    <content type="html">
&lt;p&gt;One day when I was implementing a login UI of my app in React, I
thought about a &lt;code&gt;let login = true&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;For a boolean variable in an object-oriented language such as
JavaScript, how many states could it possibly have? Let’s count, &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;,
there gives you two states.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;S ∈ { True, False }&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nope, there is an extra state, &lt;code&gt;null&lt;/code&gt;, the variable can point to an empty
reference. Of course, in such case we aren’t talking about the
variable itself, we are talking about a reference name.
In JavaScript, such reference could also evaluate to &lt;code&gt;undefined&lt;/code&gt;!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;S ∈ { True, False, null, undefined }&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="why-does-it-matter"&gt;Why does it matter?&lt;/h2&gt;

&lt;p&gt;Consider the &lt;code&gt;login&lt;/code&gt; flag we mentioned, the
following table summarizes all possible values and component it should
render as a result.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;login&lt;/th&gt;
      &lt;th&gt;Component&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;true&lt;/td&gt;
      &lt;td&gt;IndexPage&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;false&lt;/td&gt;
      &lt;td&gt;LoginPage&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;null&lt;/td&gt;
      &lt;td&gt;SplashPage&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;undefined&lt;/td&gt;
      &lt;td&gt;SplashPage&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Rendering &lt;code&gt;IndexPage&lt;/code&gt; and &lt;code&gt;LoginPage&lt;/code&gt; when &lt;code&gt;login&lt;/code&gt; is true or false
looks straightforward, but &lt;code&gt;null&lt;/code&gt;? How about &lt;code&gt;undefined&lt;/code&gt;? One trick I
took is to make use of the non-determinism of the variable, to wit:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t know whether it’s true or false, so it’s in a “&lt;a href="https://en.wikipedia.org/wiki/Cat_state"&gt;cat state&lt;/a&gt;”
that’s neither true nor false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;S ∈ { True, False, Cat }&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="should-i-use-it"&gt;Should I use it?&lt;/h2&gt;

&lt;p&gt;Don’t do that. There exists better alternative without additional
complexity, and by using the cat state you make your code harder to understand.&lt;/p&gt;

&lt;p&gt;Alternatives such as enum, like a set of constants
encapsulate exactly what this non-deterministic boolean variable is trying
to do. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;// LoginState.js
export DONNO = 1;
export NOT_LOGGEDIN = 1;
export LOGGEDIN = 2;

// app.js
import LoginState from 'LoginState'

let login = LoginState.DONNO;
let renderComponent;

switch (login) {
  case LoginState.NOT_LOGGEDIN:
    renderComponent = LoginPage;
    break;
  case LoginState.LOGGEDIN:
    renderComponent = IndexPage;
    break;
  default:
    renderComponent = SplashPage;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A quick-and-dirty implementation using non-determinism of boolean
variable wouldn’t save you much more lines of code than that.&lt;/p&gt;

&lt;p&gt;As my professor used to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[insert programming language] gives you lots of ropes to hang
yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this case, the rope is to make use of a boolean variable’s cat state and
relying on it to decide the next action. You can do that of
course, but I have shown above there is a better way to do that.&lt;/p&gt;

&lt;p&gt;When we evaluate a boolean variable, string like
&lt;code&gt;'123'&lt;/code&gt;, or integer &lt;code&gt;3&lt;/code&gt; could both be evaluated to true, while &lt;code&gt;null&lt;/code&gt;,
and &lt;code&gt;undefined&lt;/code&gt; both are evaluated to false. However, you shouldn’t rely
on it because it’s inconsistent.&lt;/p&gt;

&lt;p&gt;Consider the following if-statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;if (login === true) {
  // ...logged in
} else {
  // ...cat state 🐱
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our understanding on boolean variable is that it’s value could either be
true or false, there is no cat state before OOP, and now with cat state
we are just inviting troubles because to interpret the if-statement
above, we must also consider what that boolean could be — an
integer, a string, a &lt;code&gt;null&lt;/code&gt;, or an &lt;code&gt;undefined&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;If the codebase has never relied on &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; in the first
place for it’s logic, then we could even forgo the &lt;code&gt;=== true&lt;/code&gt; part
(note &lt;code&gt;1 == true&lt;/code&gt; evaluates to true).&lt;/p&gt;

&lt;h2 id="verdict"&gt;Verdict&lt;/h2&gt;

&lt;p&gt;Using the “cat state” of a boolean variable might be a neat
trick  on project where everyone working on the code is aware
of the possible values of that variable might contain. It could be
true, false, and anything else.&lt;/p&gt;

&lt;p&gt;A safer bet, would be to use boolean strictly with its true/false
values by using &lt;code&gt;===&lt;/code&gt; operator, or use TypeScript that comes with static
type-checking.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog.tommyku.com,2017-08-28:/blog/how-to-make-epubs-with-vertical-layout/</id>
    <title type="html">How to make EPUB ebooks with vertical layout?</title>
    <published>2017-08-28T16:00:00Z</published>
    <updated>2017-08-28T16:00:00Z</updated>
    <link rel="alternate" href="https://blog.tommyku.com/blog/how-to-make-epubs-with-vertical-layout/"/>
    <content type="html">
&lt;p&gt;For years I have been reading Chinese/Japanese novels on Kindle and
Google Play Book. While most Japanese books were formatted to
scroll from right to left and display texts vertically like real
books, literally none of the Chinese books I have read do the same
thing. The more I am used to reading physical books, the more this bugs
me.&lt;/p&gt;

&lt;p&gt;In this post, I demonstrating how to convert Chinese EPUB ebook from
horizontal left-to-right to vertical right-to-left layout.&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./rl-demo.png" style="max-width: 15em;"&gt;
&lt;figcaption&gt;Above: horizontal left-to-right layout. Below: vertical
right-to-left layout.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If want to follow this step-by-step guide, you can download a sample
EPUB &lt;a href="https://github.com/tommyku/vertical-epub/raw/master/static/horizontal.epub"&gt;here&lt;/a&gt;.
Althought using advanced EPUB editors like Sigil or Calibre will make your life easier,
the ZIP archiver and text editors that came with your system
will work just as well.&lt;/p&gt;

&lt;h2 id="structure-of-an-epub-file"&gt;Structure of an EPUB file&lt;/h2&gt;

&lt;p&gt;A EPUB file is essentially a ZIP archive containing HTML files, CSS
stylesheets, images and some files with metadata for the ebook.&lt;/p&gt;

&lt;p&gt;Because EPUB is based on the widely adopted ZIP format, its content can
be easily extracted with ZIP archiver that bundles with most operating
systems. You may try to extract the content from my sample EPUB file by:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;$ unzip horizontal.epub
Archive:  horizontal.epub
 extracting: mimetype
  inflating: OEBPS/toc.ncx
  inflating: OEBPS/Text/Section001.xhtml
  inflating: OEBPS/Style/style.css
  inflating: OEBPS/content.opf
  inflating: META-INF/container.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The file &lt;code&gt;mimetype&lt;/code&gt;, as the name suggests, specifies the MIME type of
the ebook. &lt;code&gt;toc.ncx&lt;/code&gt; serves as a table of content.
&lt;code&gt;META-INF/container.xml&lt;/code&gt; indicates the path to the root file
&lt;code&gt;content.opf&lt;/code&gt;. &lt;code&gt;content.opf&lt;/code&gt; contains a list of all resources (like
HTML/CSS files) in the ebook and a &lt;code&gt;&amp;lt;spine&amp;gt;&lt;/code&gt; tag helps specifying page
direction.&lt;/p&gt;

&lt;p&gt;Purposes of files in &lt;code&gt;OEBPS/Text&lt;/code&gt; and &lt;code&gt;OEBPS/Style&lt;/code&gt; are self-explanatory.&lt;/p&gt;

&lt;h2 id="css-rules-for-vertical-layout"&gt;CSS rules for vertical layout&lt;/h2&gt;

&lt;p&gt;One CSS rules that decides the printing behavior of a
document is &lt;code&gt;writing-mode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;writing-mode&lt;/code&gt; can have these values: &lt;code&gt;horizontal-tb&lt;/code&gt; (this is the initial value),
&lt;code&gt;vertical-rl&lt;/code&gt; and &lt;code&gt;vertical-lr&lt;/code&gt;. To print characters vertically from
right to left, &lt;code&gt;writing-mode&lt;/code&gt; should be set to &lt;code&gt;vertical-rl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now open &lt;code&gt;OEBPS/Style/styles.css&lt;/code&gt; and modify rules in the &lt;code&gt;html&lt;/code&gt;
selector to the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-css"&gt;/* OEBPS/Style/styles.css */
@charset "utf-8";
html {
  -epub-writing-mode: vertical-rl;
        writing-mode: vertical-rl;
 }
/* ... */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we are simply dealing with HTML and CSS files, we can go ahead and
open &lt;code&gt;OEBPS/Text/Section001.xhtml&lt;/code&gt; in a browser and see the change.&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./writing-mode-initial.png" style="max-width: 15em;"&gt;
&lt;figcaption&gt;Before: text printed horizontally from the left&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src="./writing-mode-vertical-rl.png" style="max-width: 5em;"&gt;
&lt;figcaption&gt;After: text printed vertically from the right&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If the EPUB you are editing does not have a &lt;code&gt;style.css&lt;/code&gt; file, you
must add it inside &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of each &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.xhtml&lt;/code&gt; file, and add the file path to
&lt;code&gt;&amp;lt;manifest&amp;gt;&lt;/code&gt; tag in &lt;code&gt;content.opf&lt;/code&gt; yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- OEBPS/content.opf --&amp;gt;
&amp;lt;?xml version="1.0" encoding="UTF-8" ?&amp;gt;
&amp;lt;package version="2.0" xmlns="http://www.idpf.org/2007/opf" unique-identifier="PrimaryID"&amp;gt;
  ...
  &amp;lt;manifest&amp;gt;
    ...
    &amp;lt;item id="stylesheet" href="./Style/style.css"  media-type="text/css" /&amp;gt;
    ...
  &amp;lt;/manifest&amp;gt;
  ...
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!-- OEBPS/Text/Section001.xhtml --&amp;gt;
&amp;lt;?xml version="1.0" encoding="UTF-8" ?&amp;gt;
&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&amp;gt;
&amp;lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    ...
    &amp;lt;link rel="stylesheet" href="../Style/style.css" type="text/css" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    ...
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;writing-mode&lt;/code&gt; in EPUB 3 standard adopted the &lt;code&gt;-epub-&lt;/code&gt; prefix, which
borrows properties from CSS Writing Modes 2011-04-28 because when EPUB 3
was out, CSS Writing Modes was still a W3C working draft. The rule might
have changed, or will change in the future, yet &lt;code&gt;-epub-&lt;/code&gt; prefix guarantees
behavior consistent to when EPUB 3 standard was defined.&lt;/p&gt;

&lt;h2 id="scrolling-from-right-to-left"&gt;Scrolling from right to left&lt;/h2&gt;

&lt;p&gt;Most reading systems render the pages from left to right, but there’s an optional
attribute that can reverse the page direction.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;OEBPS/content.opf&lt;/code&gt; there is a tag &lt;code&gt;&amp;lt;spine&amp;gt;&lt;/code&gt;. You can set its
&lt;code&gt;page-progression-direction&lt;/code&gt; attribute to &lt;code&gt;rtl&lt;/code&gt; to make the pages scroll
from right to left.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- OEBPS/content.opf --&amp;gt;
&amp;lt;?xml version="1.0" encoding="UTF-8" ?&amp;gt;
&amp;lt;package version="2.0" xmlns="http://www.idpf.org/2007/opf" unique-identifier="PrimaryID"&amp;gt;
  ...
  &amp;lt;spine toc="..." page-progression-direction="rtl"&amp;gt;
    ...
  &amp;lt;/spine&amp;gt;
  ...
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test this, you will have to load the EPUB file into your ebook reader
or use an ebook reader because this is a EPUB behavior, not HTML/CSS
which we saw in last section.&lt;/p&gt;

&lt;h2 id="packing-up-a-epub-file"&gt;Packing up a EPUB file&lt;/h2&gt;

&lt;p&gt;EPUB files are ZIP archives. You can use a ZIP archiver to pack up the
files into a EPUB file. In Linux you can do this.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;$ zip -0 vertical.epub mimetype
$ zip -r vertical.epub META-INF OEBPS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First &lt;code&gt;mimetype&lt;/code&gt; is added to a ZIP archive with file extension &lt;code&gt;.epub&lt;/code&gt;,
then &lt;code&gt;META-INF&lt;/code&gt; and &lt;code&gt;OEBPS&lt;/code&gt; are added because &lt;code&gt;mimetype&lt;/code&gt; should appear
at the beginning of the EPUB file.&lt;/p&gt;

&lt;p&gt;Now you can add the EPUB file into your favorite ebook reader and enjoy
your document in a vertical, right-to-left layout.&lt;/p&gt;

&lt;p&gt;You can find the outcome of the example file &lt;a href="https://github.com/tommyku/vertical-epub/raw/master/static/vertical.epub"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="references"&gt;References&lt;/h2&gt;

&lt;p&gt;This post is inspired by or has referenced to these pages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://www.idpf.org/epub/30/spec/epub30-ocf.html"&gt;EPUB Open Container Format (OCF) 3.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://epubzone.org/news/epub-3-and-global-language-support"&gt;EPUB 3 and Global Language Support | EPUBZone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blog.altova.com/learning-about-epub-structure-and-content/"&gt;Learning About EPUB: Structure and Content - Altova Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.zhihu.com/question/21234737"&gt;如何制作竖排文字的 Mobi 格式电子书? - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog.tommyku.com,2017-08-01:/blog/my-recipe-book/</id>
    <title type="html">My recipe book</title>
    <published>2017-08-01T07:00:00Z</published>
    <updated>2017-08-01T07:00:00Z</updated>
    <link rel="alternate" href="https://blog.tommyku.com/blog/my-recipe-book/"/>
    <content type="html">
&lt;p&gt;During my 3-month internship in San Francisco, choices of meals was a big concern everyday.
Balancing the need for delicious foods, the walk distance to get food, and cost for food (double of
that in Hong Kong) has been a troublesome task.&lt;/p&gt;

&lt;p&gt;Solution? You’ve gotta cook.&lt;/p&gt;

&lt;p&gt;In a household of 3-4 guys which most don’t care about taste as long as
the food is edible, cooking together is a good activity to bond, relieve stresses,
save money, and most importantly getting our stomaches filled.&lt;/p&gt;

&lt;p&gt;This post is a living document over the duration of my internship (mid
June - mid Sept) in which I post (unorganized and sometimes inaccurate) recipes of
our meals. I cannot guarantee they are all delicious or healthy because most of us in
the house don’t care :p&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./collage.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;figcaption&gt;Impromptu meals made with leftover or random ingredients&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;!-- start of recipe --&gt;

&lt;h2 id="animal-style-sliced-potato"&gt;Animal style sliced potato&lt;/h2&gt;

&lt;p&gt;Made on &lt;time&gt;Aug 19&lt;/time&gt;, serves 2-3&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./0819_1.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;/figure&gt;

&lt;h3 id="ingredients"&gt;Ingredients&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Potato&lt;/li&gt;
  &lt;li&gt;Shredded Cheddar cheese&lt;/li&gt;
  &lt;li&gt;Feta cheese&lt;/li&gt;
  &lt;li&gt;Sliced cheese&lt;/li&gt;
  &lt;li&gt;Smoked paprika&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="steps"&gt;Steps&lt;/h3&gt;

&lt;h4 id="fried-potato-slices"&gt;Fried potato slices&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Slice 2-3 potatoes into 0.5cm slices&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Season with salt and pepper&lt;/p&gt;

    &lt;p&gt;&lt;img src="./0819_2.jpg" width="100%" style="max-width: 48em;"&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Heat oil on pan, the oil is ready when it bubbles around a chopstick
head&lt;/li&gt;
  &lt;li&gt;Fry the potato slices, add smoked paprika, salt and pepper on one
side as it fries, turn when it looks slightly brown on edges but not on
surface&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Leave the finished slices on kitchen paper to absorb oil&lt;/p&gt;

    &lt;p&gt;&lt;img src="./0819_3.jpg" width="100%" style="max-width: 48em;"&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="baking-with-cheese"&gt;Baking with cheese&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Layer the fried potato slices on a baking sheet, or stack them in a
metal bowl&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generously cover the potato slices with shredded cheddar cheese,
feta cheese and sliced cheese&lt;/p&gt;

    &lt;p&gt;&lt;img src="./0819_4.jpg" width="100%" style="max-width: 48em;"&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Heat oven to 425℉, bake the potatoes for 15-25 minutes&lt;/li&gt;
  &lt;li&gt;Serve while hot with a fork&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- end of recipe --&gt;

&lt;h2 id="fancy-egg-for-barbecue-day"&gt;Fancy egg for barbecue day&lt;/h2&gt;

&lt;p&gt;Made on &lt;time&gt;Aug 18&lt;/time&gt;, serves 3&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./0818_1.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;/figure&gt;

&lt;p&gt;Special thanks to Ian Hays for teaching me this dish. It’s perfect for
refreshment in barbecue comprising mainly of heavy salty meat.&lt;/p&gt;

&lt;h3 id="ingredients-1"&gt;Ingredients&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Egg&lt;/li&gt;
  &lt;li&gt;Bacon slices&lt;/li&gt;
  &lt;li&gt;Yellow mustard&lt;/li&gt;
  &lt;li&gt;Mayonnaise&lt;/li&gt;
  &lt;li&gt;Apple cider vinegar (substituted with rice vinegar in the making of
the one in picture)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="steps-1"&gt;Steps&lt;/h3&gt;

&lt;h4 id="egg-and-bacon"&gt;Egg and bacon&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Boil 4 eggs, boil for longer to ensure the yulks solidify&lt;/li&gt;
  &lt;li&gt;Peel eggs, cut into half, put the yulk into a separate bowl&lt;/li&gt;
  &lt;li&gt;Cook thick bacon slices slowly over low heat, flip often until
crispy&lt;/li&gt;
  &lt;li&gt;Use fork to sear the bacon slices into small bits, pour into the bowl
with egg yulks&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="the-mix"&gt;The mix&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Add rice vinegar, yellow mustard and mayonnaise, start with small
portions to avoid liquidly mix&lt;/li&gt;
  &lt;li&gt;Use fork to smash the yulks and mix, add pepper generously&lt;/li&gt;
  &lt;li&gt;Taste the mix and add vinegar, mustard or mayonnaise as needed&lt;/li&gt;
  &lt;li&gt;Place the paste on where the yulks were, refrigerate for 30 minutes
before served&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- end of recipe --&gt;

&lt;!-- start of recipe --&gt;

&lt;h2 id="very-luxurious-fusilli-pasta"&gt;Very luxurious fusilli pasta&lt;/h2&gt;

&lt;p&gt;Made on &lt;time&gt;Aug 2&lt;/time&gt;, serves 2-3&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./0802_1.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;/figure&gt;

&lt;h3 id="ingredients-2"&gt;Ingredients&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Garlic&lt;/li&gt;
  &lt;li&gt;Italian sausage&lt;/li&gt;
  &lt;li&gt;Egg&lt;/li&gt;
  &lt;li&gt;Milk&lt;/li&gt;
  &lt;li&gt;Spinach&lt;/li&gt;
  &lt;li&gt;White mushroom&lt;/li&gt;
  &lt;li&gt;Fusilli pasta&lt;/li&gt;
  &lt;li&gt;Tomato sauce&lt;/li&gt;
  &lt;li&gt;Feta cheese&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;img src="./0802_ingredients.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;/figure&gt;

&lt;h3 id="steps-2"&gt;Steps&lt;/h3&gt;

&lt;h4 id="fusilli-pasta"&gt;Fusilli pasta&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Boil fusilli pasta in pot, soaked in salty water&lt;/li&gt;
  &lt;li&gt;Wash with cold water when cooked, set aside&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="sauce"&gt;Sauce&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Chop garlic; slice white mushroom; beat egg, salt and pepper to
taste, add some milk&lt;/li&gt;
  &lt;li&gt;Heat pan with oil, add garlic when hot&lt;/li&gt;
  &lt;li&gt;Squeeze the meat out of Italian sausage, add when you can smell the garlic&lt;/li&gt;
  &lt;li&gt;Chop the meat into smaller chunks, better keep the heat low while you
are chopping&lt;/li&gt;
  &lt;li&gt;Add white mushroom, season with pepper&lt;/li&gt;
  &lt;li&gt;Add spinach with a bit of salt, stir fry until soft&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
&lt;img src="./0802_2.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;/figure&gt;

&lt;h4 id="finishing-up"&gt;Finishing up&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Pour in cooked fusilli pasta, tomato sauce and egg mixture to the
sauce on pan, stir and mix&lt;/li&gt;
  &lt;li&gt;Add feta cheese and stir until all melt&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- end of recipe --&gt;

&lt;!-- start of recipe --&gt;

&lt;h2 id="slightly-charred-slow-simmered-beef"&gt;Slightly charred slow simmered beef&lt;/h2&gt;

&lt;p&gt;Made on &lt;time&gt;June 25&lt;/time&gt;, serves 2, including one who usually doesn’t
eat beef&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./0625_2.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src="./0625_1.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;/figure&gt;

&lt;p&gt;Special thanks to Morten Koldby for teaching me this dish.&lt;/p&gt;

&lt;h3 id="steps-as-taught-by-morten"&gt;Steps (as taught by Morten)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Sear the meat in the pot first.&lt;/li&gt;
  &lt;li&gt;When the meat is caramelized on the edges, put in the onions and fry them lightly.&lt;/li&gt;
  &lt;li&gt;Then pour the stock over the meat &amp;amp; onion and put in the spices. Put in 2-4 bay leafs and maybe a spoonful of thyme.&lt;/li&gt;
  &lt;li&gt;Let it simmer for at least 30 minutes, maybe 45-50.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This one is pretty messed up because all liquid boiled off while simmering. I should have added in enough beef stock.
The resultant slightly charred beef had thick sauce on the surface and may have been too salty.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;update (2017-08-15): I gave it another go, this time using up all beef
stock and simmered for 40 minutes, giving a much better result. It’d
taste even better if small chunks of carrot and potato were added.&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./0815_beef.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;/figure&gt;

&lt;!-- end of recipe --&gt;
&lt;!-- start of recipe --&gt;

&lt;h2 id="english-muffin-veggie-burger"&gt;English muffin veggie burger&lt;/h2&gt;

&lt;p&gt;Made on &lt;time&gt;June 24&lt;/time&gt;, serves 2&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./0624_1.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;/figure&gt;

&lt;h3 id="steps-3"&gt;Steps&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Grill English muffin on both sides&lt;/li&gt;
  &lt;li&gt;Put cheese on top of English muffin while still hot, set aside&lt;/li&gt;
  &lt;li&gt;Grill veggie burger until it looks done&lt;/li&gt;
  &lt;li&gt;Put the burger inside the English muffin&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- end of recipe --&gt;
&lt;!-- start of recipe --&gt;

&lt;h2 id="white-rice-canned-vegetable-soup-scrambled-egg-with-baby-spinach-and-cheese-and-broccoli-with-sausage-meat"&gt;White rice, canned vegetable soup, scrambled egg with baby spinach and cheese, and broccoli with sausage meat&lt;/h2&gt;

&lt;p&gt;Made on &lt;time&gt;June 22&lt;/time&gt;, serves 2&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./0622_1.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;figcaption&gt;Sorry this is the only picture I took&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id="steps-4"&gt;Steps&lt;/h3&gt;

&lt;h4 id="rice"&gt;Rice&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Make white rice, set aside&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="canned-vegetable-soup"&gt;Canned vegetable soup&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Heat the soup by following instructions on can&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="broccoli-with-sausage-meat"&gt;Broccoli with sausage meat&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Cut broccoli to chunks&lt;/li&gt;
  &lt;li&gt;Heat oil on frying pan, add sausage meat when oil is hot&lt;/li&gt;
  &lt;li&gt;Chop sausage to pieces with wooden spatula then stir fry&lt;/li&gt;
  &lt;li&gt;Add broccoli when sausage meat is done, salt and pepper to taste,
stir fry until soft after water came out from broccoli&lt;/li&gt;
  &lt;li&gt;Add water and let simmer the broccoli to ensure tender texture (afterthought)*&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="scrambled-egg-with-baby-spinach-and-cheese"&gt;Scrambled egg with baby spinach and cheese&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Beat eggs in mixing bowl and stir, salt and pepper to taste&lt;/li&gt;
  &lt;li&gt;Heat oil on frying pan, add baby spinace when oil is hot&lt;/li&gt;
  &lt;li&gt;Add salt, then pan fry until soft after water came out from baby
spinach&lt;/li&gt;
  &lt;li&gt;Pour in egg mixture onto the pan, more salt and pepper at will,
let it sit till the bottom has hardened&lt;/li&gt;
  &lt;li&gt;Pour in milk&lt;/li&gt;
  &lt;li&gt;Stir the content until it looks scrambled&lt;/li&gt;
  &lt;li&gt;Add in feta cheese, stir until molten&lt;/li&gt;
&lt;/ol&gt;

&lt;after-thought&gt;&lt;/after-thought&gt;

&lt;!-- end of recipe --&gt;
&lt;!-- start of recipe --&gt;

&lt;h2 id="fried-rice-with-celery-mixed-vegetables-and-ground-sausage"&gt;Fried rice with celery, mixed vegetables and ground sausage&lt;/h2&gt;

&lt;p&gt;Made on &lt;time&gt;June 20&lt;/time&gt;, serves 2&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./0620_1.jpg" width="100%" style="max-width: 48em;"&gt;
&lt;/figure&gt;

&lt;h3 id="steps-5"&gt;Steps&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Make white rice, set aside&lt;/li&gt;
  &lt;li&gt;Take out frozen mixed vegetables, set aside to defroze&lt;/li&gt;
  &lt;li&gt;Clean and cut celery to chunks&lt;/li&gt;
  &lt;li&gt;Soak in vinegar and/or sake with salt and pepper to
taste for 10min (afterthought)*&lt;/li&gt;
  &lt;li&gt;Heat oil on frying pan, add sausage meat, smush to small chunks&lt;/li&gt;
  &lt;li&gt;Add celery and mixed vegetables to pan, add soy sauce and salt
then stir fry until tender&lt;/li&gt;
  &lt;li&gt;Add a bit of water and more soy sauce and simmer for
softer celery (afterthought)*&lt;/li&gt;
  &lt;li&gt;Add rice, add more oil to prevent charring, salt and pepper to taste, stir fry
to your heart’s content&lt;/li&gt;
&lt;/ol&gt;

&lt;after-thought&gt;&lt;/after-thought&gt;

&lt;!-- end of recipe --&gt;

&lt;script type="text/javascript"&gt;
class AfterThought extends HTMLElement {
  connectedCallback() {
    this.innerHTML = "&lt;small&gt;* afterthoughts are what I thought would make the dish better after having made it&lt;/small&gt;";
  }
}
customElements.define('after-thought', AfterThought);
&lt;/script&gt;

</content>
  </entry>
  <entry>
    <id>tag:blog.tommyku.com,2017-06-09:/blog/appcache-revisited/</id>
    <title type="html">AppCache revisited</title>
    <published>2017-06-09T16:00:00Z</published>
    <updated>2017-06-09T16:00:00Z</updated>
    <link rel="alternate" href="https://blog.tommyku.com/blog/appcache-revisited/"/>
    <content type="html">
&lt;p&gt;Two years ago, I wrote about the use of &lt;em&gt;Application Cache
(AppCache)&lt;/em&gt; in the post “&lt;a href="https://blog.tommyku.com/blog/adding-html5-application-cache-to-speed-up-your-web-app-in-5-minutes/"&gt;Adding HTML5 application cache to speed up your web app in 5 minutes&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;The AppCache feature &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache"&gt;is deprecated as a web standard&lt;/a&gt;, so newer
version of browsers may not support it.&lt;/p&gt;

&lt;p&gt;In comparison to its alternative &lt;em&gt;Service Worker&lt;/em&gt;, AppCache is more
difficult to use because the web server has to serve the manifest files
in &lt;code&gt;text/cache-manifest&lt;/code&gt; type while service worker is an ordinary JavaScript file.
No tinkering with the web server required except for
the HTTPS. Service worker has a shortcoming of unable to
run on browser with JavaScript disabled while AppCache doesn’t need
JavaScript to run.&lt;/p&gt;

&lt;p&gt;The title of this post is “&lt;strong&gt;AppCache revisited&lt;/strong&gt;”, but I am not going
to implement it again. Instead, I am migrating an old app that has
been sitting around since 2015 from AppCache to Service Worker.&lt;/p&gt;

&lt;h2 id="removing-appcache-from-an-app"&gt;Removing AppCache from an app&lt;/h2&gt;

&lt;h3 id="removing-manifest-mime-type"&gt;Removing manifest MIME type&lt;/h3&gt;

&lt;p&gt;The web server was set up to serve &lt;code&gt;*.manifest&lt;/code&gt; files with MIME type
&lt;code&gt;text/cache-manifest&lt;/code&gt;. It is no longer needed as we are removing AppCache.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-apache"&gt;# .htaccess
# ...
# Remove this line from .htaccess file
AddType text/cache-manifest .manifest
# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="removing-references-to-manifest-files-from-source"&gt;Removing references to manifest files from source&lt;/h3&gt;

&lt;p&gt;Remove the &lt;code&gt;manifest&lt;/code&gt; attribute from &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html manifest="/manifest/app.cache.manifest"&amp;gt;
&amp;lt;!-- ... --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;app.cache.manifest&lt;/code&gt; file should also be removed from the project,
note that the file looks like this at the moment.&lt;/p&gt;

&lt;p&gt;(yes, this is the same app from that old AppCache post)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CACHE MANIFEST

CACHE:
/js/app.js
/js/angular/angular.min.js
/js/angular-resource/angular-resource.min.js
/js/angular-sanitize/angular-sanitize.min.js
/css/base.css
/css/animate.css

NETWORK:
*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Later when we migrate to service worker, the list of files to be cached
is useful because like AppCache, you can specifiy exactly what to cache
in service worker.&lt;/p&gt;

&lt;p&gt;Now the app is free of the old deprecated AppCache. To achieve the same
caching effect, we will have to use add service worker to the app.&lt;/p&gt;

&lt;h2 id="adding-service-worker-to-an-app"&gt;Adding service worker to an app&lt;/h2&gt;

&lt;h3 id="requirements-of-service-worker"&gt;Requirements of service worker&lt;/h3&gt;

&lt;p&gt;HTTPS is required to run service worker because service worker can serve
modified responses to network request, increasing the risk of man in the
middle attack. According to an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"&gt;MDN article&lt;/a&gt;, Firefox disables service worker API while in private
browsing mode.&lt;/p&gt;

&lt;p&gt;To enable HTTPS on your server, &lt;a href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;
is a good source of free certificate. If your app is
hosted on &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;, it is already
being served over HTTPS (and it’s free!). &lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt;
also provides HTTPS at free-tier if you are being lazy. (though the connection between
Cloudflare and your server may not be private, see &lt;a href="https://support.cloudflare.com/hc/en-us/articles/200170416-What-do-the-SSL-options-Off-Flexible-SSL-Full-SSL-Full-SSL-Strict-mean-"&gt;this article&lt;/a&gt; for
details).&lt;/p&gt;

&lt;h3 id="the-service-workerjs"&gt;The service-worker.js&lt;/h3&gt;

&lt;p&gt;If you build your app with build tools such as &lt;code&gt;webpack&lt;/code&gt; or &lt;code&gt;gulp&lt;/code&gt;,
&lt;a href="https://workboxjs.org/#get-started"&gt;Workbox&lt;/a&gt; is a great tool for
integrating service worker into your app. The app I am maintaining
wasn’t built with any build tool but plain CSS and JavaScript. Workbox provides
options to manually select what kinds of file to cache.&lt;/p&gt;

&lt;p&gt;To show you how to add service worker to a project, I decided to write
one up manually.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;// service-worker.js
var cacheName, filesToCache;

cacheName = 'link-201706101730';

filesToCache = [
  '/',
  'index.html'
  'js/app.js',
  'js/angular/angular.min.js',
  'js/angular-resource/angular-resource.min.js',
  'js/angular-sanitize/angular-sanitize.min.js',
  'css/base.css',
  'css/animate.css',
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the top of &lt;code&gt;service-worker.js&lt;/code&gt;, the &lt;code&gt;cacheName&lt;/code&gt; and &lt;code&gt;filesToCache&lt;/code&gt;
are specified. Caching each asset with individual cache name is
possible and preferred. To keep the example simple, we use a single
cache name for all files here.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;// service-worker.js
var cacheName, filesToCache;

cacheName = 'link-201706101730';

filesToCache = [
  '/',
  'index.html'
  'js/app.js',
  'js/angular/angular.min.js',
  'js/angular-resource/angular-resource.min.js',
  'js/angular-sanitize/angular-sanitize.min.js',
  'css/base.css',
  'css/animate.css',
];

self.addEventListener('install', function(e) {
  // [ServiceWorker] Install
  return e.waitUntil(caches.open(cacheName).then(function(cache) {
    console.log('[ServiceWorker] Caching app shell');
    return cache.addAll(filesToCache);
  }));
});

self.addEventListener('fetch', function(e) {
  console.log('[ServiceWorker] Fetch', e.request.url);
  return e.respondWith(
    fetch(e.request).catch(function() {
      return caches.match(e.request);
    })
  );
});

self.addEventListener('activate', function(e) {
  console.log('[ServiceWorker] Activate');
  return e.waitUntil(caches.keys().then(function(keyList) {
    return Promise.all(keyList.map(function(key) {
      if (key !== cacheName) {
        console.log('[ServiceWorker] Removing old cache', key);
        return caches["delete"](key);
      }
    }));
  }));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This service worker set up will install and activate itself to cache new
assets. The &lt;code&gt;fetch&lt;/code&gt; event uses network first instead of cache first
approach when dealing with asset request, meaning that it always try to
fetch through the network before falling back to using caches.&lt;/p&gt;

&lt;p&gt;The code in this service worker example was heavily influenced by
&lt;a href="https://developers.google.com/web/fundamentals/architecture/app-shell"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="installing-and-updating-service-worker"&gt;Installing and updating service worker&lt;/h3&gt;

&lt;p&gt;Service worker doesn’t just work on its own, your app has to
explicitly register the service worker for it to work.&lt;/p&gt;

&lt;p&gt;To achieve this, add the following code to the end of your app’s
JavaScript file.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;// app.js
// ...

if(typeof navigator['serviceWorker'] != 'undefined') {
  window.addEventListener('load', ()=&amp;gt; {
    navigator.serviceWorker
      .register('/service-worker.js')
      .then(()=&amp;gt; {
        console.log('Service Worker Registered')
      });
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, deploy the app as usual. The app should load fast and work
offline like how it was with AppCache. Of course, background
sync and push notifications are also available thanks to service worker,
but they are out of the scope of this post.&lt;/p&gt;

&lt;h2 id="closing-thoughts"&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;One important thing to note is that despite deprecated, AppCache is
still supported by most of the major browsers (as of June 2017), while
service worker is either under development or under consideration on
Edge and Safari. The momentum of service worker is strong, with notable
sites such as Aliexpress, Flipboard, Financial Timesm and &lt;a href="https://pwa.rocks/"&gt;more&lt;/a&gt; already
using service worker to provide offline usability.&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./caniuse-appcache.png"&gt;
&lt;figcaption&gt;Browser support for AppCache (source: &lt;a href="https://caniuse.com/#feat=offline-apps"&gt;caniuse.com&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src="./caniuse-sw.png"&gt;
&lt;figcaption&gt;Browser support for service worker (source: &lt;a href="https://caniuse.com/#feat=serviceworkers"&gt;caniuse.com&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Of course, service worker isn’s just about caching, it enables for
app-link features such as push notification, background sync and install
to homescreen that will continue to fill the gap between native apps and
web apps without the need for software like Cordova and
PhoneGap.&lt;/p&gt;

&lt;p&gt;Looking back, not only AppCache, many browser APIs have been developed
to empower the web. I am excited to see as the web continues to evolve,
what will emerge to bridge the gap between native apps and web
apps (Firefox OS was a bummer), or even better, how web can surpass
native app in portability, availability and user experience.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog.tommyku.com,2017-06-08:/blog/from-nexus-5x-to-moto-z-play/</id>
    <title type="html">From Nexus 5X to Moto Z Play</title>
    <published>2017-06-08T16:00:00Z</published>
    <updated>2017-06-08T16:00:00Z</updated>
    <link rel="alternate" href="https://blog.tommyku.com/blog/from-nexus-5x-to-moto-z-play/"/>
    <content type="html">
&lt;p&gt;Despite inflamous bootloop issue, Nexus 5X is still the best phone I
have ever used. I had to replace it because bootloop happened the second
time last month. My choice of replacement was Moto Play Z, a
well-built phone balancing battery life, performance and screen quality.&lt;/p&gt;

&lt;p&gt;In this post I am going to describe my experience with Nexus 5X and
compare it with Moto Play Z.&lt;/p&gt;

&lt;h2 id="farewell-to-nexus-5x"&gt;Farewell to Nexus 5X&lt;/h2&gt;

&lt;p&gt;I purchased a Nexus 5X from Google Store Hong Kong on Novemeber 2015.
At that time, my 2-year old Nexus 4 has been suffering from low battery
life and excessive heat during casual web browsing. Google Store shipment’s
prompt shipment amazed me as I received the phone with a phone case and
USB cable the next day I pressed the buy button.&lt;/p&gt;

&lt;p&gt;Fast forward to April 2016, I had been using the phone for about half a
year. The Nexus 5X had never failed me with its excellent camera,
bright and sharp screen (423 ppi). The battery life was fine, I could
use it for a whole day during travel before recharging. Best of all,
it supports all 4G LTE bands everywhere I go (China, Taiwan, Japan, United
States, and Hong Kong).&lt;/p&gt;

&lt;p&gt;The experience was stellar until it breaks all of a sudden on August
2016, it rebooted into bootloop. Google store wasn’t helpful at the time
and they advised me to talk to LG. Of course LG fixed it, by replacing
the motherboard. Then on May 2017, bootloop happened again and it
has long passed the warranty period.&lt;/p&gt;

&lt;p&gt;Google Store was willing to replace the unit this time. My friend got a
replacement unit just one month before mine breaking down. But Google
ran out of replacement unit so I got a refund instead. That’s better than
getting a replacement that nobody knows when it’s gonna break down
again.&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./nexus5x.jpg" width="500px"&gt;
&lt;figcaption&gt;Shipping the unit back to Google in its original box, with all included accessories&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id="hello-to-moto-play-z"&gt;Hello to Moto Play Z&lt;/h2&gt;

&lt;p&gt;After returning my Nexus 5X to Google, I had to decide which phone to
use next. I couldn’t get a new Nexus 5X or Nexus 6P because Google Store
no longer sell them and I have had enough of bootloop. Pixel hasn’t been
officially available in Hong Kong either.&lt;/p&gt;

&lt;p&gt;In an attempt to look for a phone with similar qualities as Nexus 5X,
and most importantly similar 4G LTE network support. Not many phones in
Hong Kong support bands at the US. Most of them were sold to accomondate
people in Hong Kong and China. I needed a phone that supports
band 2, 4 mainly used in the USA; band 1, 3, 7 in Hong Kong; and band 38, 40, 41 in China.&lt;/p&gt;

&lt;p&gt;Samsung phones are all out of the question except for the flagship model
Samsung Galaxy S8, a bit too pricey for me. LG V20 does support
everything I need, with a big 5.7 inches screen, but it’s LG and I’ve
had enought of that. That brought me to Motorola, a usually overlooked
brand. At the time the specification stated that both Moto Z and Moto Z
Play supported all the bands I needed and each has its individual
merits.&lt;/p&gt;

&lt;p&gt;I ended up getting Moto Z Play. It was a difficult choice until I
learned that Moto Z comes with less battery capacity and no 3.5mm
headphone jack.&lt;/p&gt;

&lt;p&gt;Moto Z Play comes with a wood case that adds more grip to the
rather thin phone (7mm thick). The case attaches to the back of the
phone with 4 magnetic points, Moto Mod attachments could be attached the
same way.&lt;/p&gt;

&lt;p&gt;The screen size of Moto Z Play is 5.5 inches, slightly bigger than the
5.2 inches screen of Nexus 5X. After a couple weeks of usage I
have grown used to the bigger screen and phone size. In comparison to
Nexus 5X, Moto Z Play has comparable 403 PPI at full HD. On enhanced
color mode, the colors on screen look more vibrant and attractive than
Nexus 5X.&lt;/p&gt;

&lt;p&gt;For battery life, I could use the phone on Wifi and 4G for two days
without charging and still have 30% battery left. This is a big improvement
over the Nexus 5X, which requires charging every day, on both Wifi and 4G.
Quick Charge 3.0 wouldn’t work on both Nexus 5X and Moto Play Z as they
have their own variant of quick charging - the so called ‘quick charge’
on Nexus 5X and ‘turbocharge’ on Moto Z Play. I have never gotten the
Moto Z Play turbocharge to work on any other chargers and cables except
for the one that came in the box.&lt;/p&gt;

&lt;p&gt;The Moto Z Play comes with a very stock-like ROM, only with an
additional File Manager, Moto app and a convenient Device Help app. They
are all helpful for managing the phone and tweaking the settings, and
even testing each individual hardware component. So I’d say Moto Z Play comes
with  no bloatware and the experience is very
stock Android-like. No lag on the phone during daily use
despite I couldn’t say the same for people who run lots of background
apps and demanding games.&lt;/p&gt;

&lt;p&gt;I would say one of Moto Z Play’s selling points (despite not emphasized) is
gesture support. Chop twice to turn on the flash light, or twist twice
to open the camera app, and some more gestures worked as intended every
single time. Generally there was no mis-firing except for approaching
to turn on display during sleep can be annoying. Gestures can be enabled
or disabled individually from the built-in Moto app.&lt;/p&gt;

&lt;p&gt;The only shortcoming of Moto Z Play is its camera. Internet reviews
said it’s fine but to me it’s unacceptable when compared to Nexus 5X.
Nexus 5X’s camera app works like a charm all the time, capturing both
the details and color contrast without extra tinkering while that of
Moto Z Play always tends to sacrifice one to achieve another. Sometimes
the color was right but it looks blurry, other times it gets all the
details but the white balance was focusing at the wrong spot, resulting
in a photo too dark.&lt;/p&gt;

&lt;p&gt;The photos below were taken with Moto Z Play and Nexus 5X respectively.
I did tamper with it using GIMP to blur out people’s faces and resized
them to 25% of their original sizes. The point to be made is, if it
looks super bad after resizing, it looks at least quite bad before resizing.
Nexus 5X captures all the details both from afar and near even in
low light. Moto Z Play failed to capture much of the
details, say the text and the branches and leaves on the trees. I know
this is not an apple-to-apple comparison, but as far as I can tell from
using them, Nexus 5X seems to have a superior camera (or image
processing software, or both).&lt;/p&gt;

&lt;figure&gt;
&lt;img src="./moto_camera.jpg"&gt;
&lt;figcaption&gt;Photo taken outdoor with Moto Z Play&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src="./nexus_camera.jpg"&gt;
&lt;figcaption&gt;Photo taken outdoor with Nexus 5X at night&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I am too poor to care about Moto Mods. The 16-pin connector at the back of the
phone is both visually distracting and useless to me.&lt;/p&gt;

&lt;h2 id="closing-words"&gt;Closing words&lt;/h2&gt;

&lt;p&gt;Overall I am happy to have Moto Z Play as a replacement for Nexus 5X, it
is more performant with longer battery life and better screen. The
camera is a big disappointment considering Motorola has got everything
just right on the phone. Should Moto Z Play had a camera as good as that
of Nexus 5X, it’d have been a perfect phone. Still, if you are looking
for an alternative or replacement to Nexus 5X, I’d say Moto Z Play is
the closest alternative at the price range of HKD$3,000 ~ HKD$4,000 price
range (I got mine at HKD$2,870).&lt;/p&gt;
</content>
  </entry>
</feed>


